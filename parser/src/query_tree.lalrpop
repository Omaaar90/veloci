use std::str::FromStr;
use ast::{Ast};

grammar;

pub Expr: Box<Ast> = { // (1)
    <e:Expr> "OR" <f:AndExpr> => Box::new(Ast::Or(e, f)), // (2)
    AndExpr,
};

AndExpr: Box<Ast> = {
    <f:AndExpr> "AND" <t:Termo> => Box::new(Ast::And(f, t)),
    Termo,
};

Termo: Box<Ast> = {
    <n:Term> => Box::new(Ast::Filter(n.to_string())),
    <Term> <Term> => Box::new(Ast::Filter(format!("{} {}", <>))),
    <Term> <Term> <Term> => Box::new(Ast::Filter(format!("{} {} {}", <>))),
    <Term> <Term> <Term> <Term> => Box::new(Ast::Filter(format!("{} {} {} {}", <>))),
    <Term> <Term> <Term> <Term> <Term> => Box::new(Ast::Filter(format!("{} {} {} {} {}", <>))),
    <Term> <Term> <Term> <Term> <Term> <Term> => Box::new(Ast::Filter(format!("{} {} {} {} {} {}", <>))),
    "(" <Expr> ")"
};

Term: &'input str = {
    r"\S+" => <>
};

